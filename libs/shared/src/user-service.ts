// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/user-service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'user_service';

export interface Empty {}

export interface FindOneUserDto {
  id: string;
}

export interface UpdateUserDto {
  id: string;
}

export interface CreateUserDto {
  username: string;
  password: string;
  fullName: string;
}

export interface SignInDto {
  username: string;
  password: string;
}

export interface User {
  id: string;
  username: string;
  password: string;
  fullName: string;
}

export interface Users {
  users: User[];
}

export interface SignInResponse {
  user: User | undefined;
  accessToken: string;
  expiresIn: string;
}

export interface Order {
  id: string;
  userId: string;
  productId: string;
  quantity: number;
  totalPrice: number;
}

export interface Orders {
  orders: Order[];
}

export const USER_SERVICE_PACKAGE_NAME = 'user_service';

export interface UserServiceClient {
  createUser(request: CreateUserDto): Observable<User>;

  signIn(request: SignInDto): Observable<SignInResponse>;

  listUserOrders(request: FindOneUserDto): Observable<Orders>;
}

export interface UserServiceController {
  createUser(request: CreateUserDto): Promise<User> | Observable<User> | User;

  signIn(
    request: SignInDto,
  ): Promise<SignInResponse> | Observable<SignInResponse> | SignInResponse;

  listUserOrders(
    request: FindOneUserDto,
  ): Promise<Orders> | Observable<Orders> | Orders;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['createUser', 'signIn', 'listUserOrders'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const USER_SERVICE_NAME = 'UserService';
