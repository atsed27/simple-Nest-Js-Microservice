// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/product-service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "product_service";

export interface CreateProductDto {
  name: string;
  description: string;
  price: number;
  availability: boolean;
  category: string;
}

export interface UpdateProductDto {
  id: string;
  name: string;
  description: string;
  price: number;
  availability: boolean;
  category: string;
}

export interface FindOneProductDto {
  id: string;
}

export interface DeleteProductDto {
  id: string;
}

export interface ProductDto {
  id: string;
  name: string;
  description: string;
  price: number;
  availability: boolean;
  category: string;
}

export interface ProductListDto {
  products: ProductDto[];
}

export interface ListProductsDto {
  category: string;
  minPrice: number;
  maxPrice: number;
  availability: boolean;
}

export interface Empty {
}

export const PRODUCT_SERVICE_PACKAGE_NAME = "product_service";

export interface ProductServiceClient {
  createProduct(request: CreateProductDto): Observable<ProductDto>;

  getOneProduct(request: FindOneProductDto): Observable<ProductDto>;

  updateProduct(request: UpdateProductDto): Observable<ProductDto>;

  deleteProduct(request: DeleteProductDto): Observable<Empty>;

  listProducts(request: ListProductsDto): Observable<ProductListDto>;
}

export interface ProductServiceController {
  createProduct(request: CreateProductDto): Promise<ProductDto> | Observable<ProductDto> | ProductDto;

  getOneProduct(request: FindOneProductDto): Promise<ProductDto> | Observable<ProductDto> | ProductDto;

  updateProduct(request: UpdateProductDto): Promise<ProductDto> | Observable<ProductDto> | ProductDto;

  deleteProduct(request: DeleteProductDto): Promise<Empty> | Observable<Empty> | Empty;

  listProducts(request: ListProductsDto): Promise<ProductListDto> | Observable<ProductListDto> | ProductListDto;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createProduct", "getOneProduct", "updateProduct", "deleteProduct", "listProducts"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";
