// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/order-service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'order_service';

export interface CreateOrderDto {
  userId: string;
  productId: string;
  quantity: number;
}

export interface OrderDto {
  id: string;
  userId: string;
  productId: string;
  quantity: number;
  totalPrice: number;
}

export interface ListOrdersDto {}

export interface OrderListDto {
  orders: OrderDto[];
}

export const ORDER_SERVICE_PACKAGE_NAME = 'order_service';

export interface OrderServiceClient {
  createOrder(request: CreateOrderDto): Observable<OrderDto>;

  listOrders(request: ListOrdersDto): Observable<OrderListDto>;
}

export interface OrderServiceController {
  createOrder(
    request: CreateOrderDto,
  ): Promise<OrderDto> | Observable<OrderDto> | OrderDto;

  listOrders(
    request: ListOrdersDto,
  ): Promise<OrderListDto> | Observable<OrderListDto> | OrderListDto;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['createOrder', 'listOrders'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('OrderService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('OrderService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const ORDER_SERVICE_NAME = 'OrderService';
